generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  displayName String
  picture     String?

  role UserRole @default(REGULAR)

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  accounts   Account[]
  workspaces WorkspaceMember[]
  snippets   Snippet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model Workspace {
  id String @id @default(uuid())

  name        String
  emoji       String?
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]
  members  WorkspaceMember[]

  @@map("workspaces")
}

model WorkspaceMember {
  id String @id @default(uuid())

  role WorkspaceMemberRole

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String?    @map("workspace_id")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("workspace_members")
}

model Project {
  id String @id @default(uuid())

  name        String
  emoji       String?
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String?    @map("workspace_id")

  microservices Microservice[]

  @@map("projects")
}

model Microservice {
  id String @id @default(uuid())

  name String
  type MicroserviceType

  isUpdateByGetScheme Boolean @default(true) @map("is_update_by_get_scheme")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?  @map("project_id")

  servers Server[]
  schemes OpenApiScheme[]

  @@map("microservices")
}

model OpenApiScheme {
  id String @id @default(uuid())

  version    Int
  content    String?
  cache      String?
  updateType OpenApiSchemeUpdateType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  microservice   Microservice? @relation(fields: [microserviceId], references: [id], onDelete: Cascade)
  microserviceId String?       @map("microservice_id")

  @@map("openapi_schemes")
}

model Server {
  id String @id @default(uuid())

  url         String
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  microservice   Microservice? @relation(fields: [microserviceId], references: [id], onDelete: Cascade)
  microserviceId String?       @map("microservice_id")

  @@map("servers")
}

model Snippet {
  id String @id @default(uuid())

  name    String
  snippet Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("snippets")
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
  GITHUB
}

enum WorkspaceMemberRole {
  READER
  REGULAR
  ADMIN
  SUPERADMIN
}

enum MicroserviceType {
  URL
  TEXT
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum OpenApiSchemeUpdateType {
  INIT
  WEBHOOK
  GET_REQUEST
  MANUAL
  CLI
}
