model Microservice {
  id String @id @default(uuid())

  name String
  type MicroserviceType
  url String?

  isUpdateByGetScheme Boolean @default(true) @map("is_update_by_get_scheme")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  servers Server[]
  schemes Scheme[]

  @@map("microservice")
}

model Scheme {
  id String @id @default(uuid())

  version    Int
  content    String?
  cache      String?
  updateType SchemeUpdateType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  microserviceId String?       @map("microservice_id")
  microservice   Microservice? @relation(fields: [microserviceId], references: [id], onDelete: Cascade)

  @@map("scheme")
}

model Server {
  id String @id @default(uuid())

  url         String
  description String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  microservice   Microservice? @relation(fields: [microserviceId], references: [id], onDelete: Cascade)
  microserviceId String?       @map("microservice_id")

  @@map("server")
}

enum MicroserviceType {
  URL
  TEXT
}

enum SchemeUpdateType {
  INIT // При создании
  WEBHOOK
  GET_REQUEST // При получении микросервиса
  MANUAL // Ручное получение или обновление
  CLI
}
